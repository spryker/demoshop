#!/bin/bash
#
# *** Pets-Deli deployment
#
# configure_shared_links
# This script is executed only on a deployment host (as user root), after checking out code from scm repository.
# It should create links to shared directories, as well as any other links (configuration, data).
# If any type of code building is needed (like fetching external libraries or compling), it should be done here.
#
# This script should write only to $deploy_source_dir
# Contents of $deploy_source_dir will be afterwards put into tarball and distributed among all application hosts.
#

#Exit if a command exits with a non-zero status
set -e

#Exit if an uninitialised variable is used
set -o nounset

FILEPATH=`pwd`/$0; BASEDIR=`dirname $FILEPATH`; source $BASEDIR/vars; source $BASEDIR/functions
outfile=`mktemp /tmp/deploy-XXXXXX`

cd $deploy_source_dir
size=`du -sh . | awk '{print $1}'`
echo "Source code revision: ${revision}, size: ${size}B - starting build process:"


if is_default_store; then
  echo "Deleting and linking shared data .."
  rm -rf data
  ln -sf "$shared_dir/data" data
  rm -rf "src/Generated"
  rm -f "config/Shared/config_local.php"
  ln -sf "$shared_dir/config_local.php" "config/Shared/config_local.php"
fi


echo "Linking config_local_${APPLICATION_STORE} files .."
rm -f "config/config_local_${APPLICATION_STORE}.php"
ln -sf "$shared_dir/config_local_${APPLICATION_STORE}.php" "config/Shared/config_local_${APPLICATION_STORE}.php"
rm -f "config/Shared/console_env_local.php"
ln -sf "$shared_dir/console_env_local.php" "config/Shared/console_env_local.php"


## Composer
composer_cache_dir="$deploy_dir/vendor_cache/${environment}/vendor"
composer_install "$composer_cache_dir"


## Get "Generated" dir from cache
if is_default_store; then
  generated_cache_dir="$deploy_dir/Generated/${environment}"
  [ ! -d $generated_cache_dir ] && mkdir -p "$generated_cache_dir"
  cp -r --reflink=auto "$generated_cache_dir" "src/"
  rm -rf "src/Generated/Propel"
fi

chown -R ${deploy_user}. .


echo "Build multiple core class map .."
APPLICATION_ENV=${environment} vendor/bin/build-multiple-core-class-map

echo "Generate transfers .."
APPLICATION_ENV=${environment} vendor/bin/pav-console transfer:generate


## Generate Code
if is_default_store; then
  echo " - generating propel config code"
  APPLICATION_ENV=$environment php -d "newrelic.appname='Deploy($environment)'" vendor/bin/pav-console propel:config:convert &> $outfile
  if [ $? -ne 0 ]; then
    echo "!!! FATAL: There was an error in pav-console propel:config:convert"
    cat $outfile
    exit 2
  fi

  echo " - copy propel schemata"
  APPLICATION_ENV=$environment php -d "newrelic.appname='Deploy($environment)'" vendor/bin/pav-console propel:schema:copy &> $outfile
  if [ $? -ne 0 ]; then
    echo "!!! FATAL: There was an error in pav-console propel:schema:copy"
    cat $outfile
    exit 2
  fi

  echo " - building propel entities and queries"
  APPLICATION_ENV=$environment php -d "newrelic.appname='Deploy($environment)'" vendor/bin/pav-console propel:model:build &> $outfile
  if [ $? -ne 0 ]; then
    echo "!!! FATAL: There was an error in pav-console propel:model:build"
    cat $outfile
    exit 2
  fi

else
  echo "NOT default store. Skipped propel generation."
fi

### Save the "Generated" dir back in cache
if is_default_store; then
  rsync -ra --delete src/Generated/ $generated_cache_dir
fi


### node.js, Grunt
if is_default_store; then
  npm_cache_dir=/data/deploy/vendor_cache/${environment}/node_modules
  npm_install "${npm_cache_dir}"
  npm run spy-setup
fi


### Allright, no error, deployment continues.
rm -f $outfile
exit 0
