Index: vendor/spryker/spryker/Bundles/Transfer/src/SprykerEngine/Shared/Transfer/AbstractTransfer.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vendor/spryker/spryker/Bundles/Transfer/src/SprykerEngine/Shared/Transfer/AbstractTransfer.php	(revision af325d422361de69aad5ce9f5452404658a56b29)
+++ vendor/spryker/spryker/Bundles/Transfer/src/SprykerEngine/Shared/Transfer/AbstractTransfer.php	(revision )
@@ -136,7 +136,7 @@
                 /** @var TransferInterface $transferObject */
                 $transferObject = new $type();
                 if (is_array($value)) {
-                    $transferObject->fromArray($value);
+                    $transferObject->fromArray($value, $ignoreMissingProperty);
                     $value = $transferObject;
                 }
             }
@@ -144,7 +144,7 @@
             try {
                 $this->$setter($value);
             } catch (\Exception $e) {
-                if ($ignoreMissingProperty) {
+                if (!$ignoreMissingProperty) {
                     throw new \InvalidArgumentException(
                         sprintf('Missing property "%s" in "%s" (setter %s)', $property, get_class($this), $setter)
                     );
@@ -159,9 +159,10 @@
      * @param string $elementType
      * @param array $arrayObject
      *
+     * @param bool $ignoreMissingProperties
      * @return \ArrayObject
      */
-    protected function processArrayObject($elementType, array $arrayObject)
+    protected function processArrayObject($elementType, array $arrayObject, $ignoreMissingProperties = false)
     {
         /* @var TransferInterface $transferObject */
         $transferObjectsArray = new \ArrayObject();
@@ -169,12 +170,12 @@
             if (is_array($arrayElement)) {
                 if ($this->isAssociativeArray($arrayElement)) {
                     $transferObject = new $elementType();
-                    $transferObject->fromArray($arrayElement);
+                    $transferObject->fromArray($arrayElement, $ignoreMissingProperties);
                     $transferObjectsArray->append($transferObject);
                 } else {
                     foreach ($arrayElement as $arrayElementItem) {
                         $transferObject = new $elementType();
-                        $transferObject->fromArray($arrayElementItem);
+                        $transferObject->fromArray($arrayElementItem, $ignoreMissingProperties);
                         $transferObjectsArray->append($transferObject);
                     }
                 }
