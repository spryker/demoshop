Index: vendor/spryker/spryker/Bundles/ZedRequest/src/SprykerFeature/Shared/ZedRequest/Client/AbstractResponse.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vendor/spryker/spryker/Bundles/ZedRequest/src/SprykerFeature/Shared/ZedRequest/Client/AbstractResponse.php	(revision af325d422361de69aad5ce9f5452404658a56b29)
+++ vendor/spryker/spryker/Bundles/ZedRequest/src/SprykerFeature/Shared/ZedRequest/Client/AbstractResponse.php	(revision )
@@ -177,7 +177,7 @@
             $transfer = $this->createTransferObject(
                 $this->values['transferClassName']
             );
-            $transfer->fromArray($this->values['transfer']);
+            $transfer->fromArray($this->values['transfer'], true);
 
             return $transfer;
         }
Index: vendor/spryker/spryker/Bundles/ZedRequest/src/SprykerFeature/Shared/ZedRequest/Client/AbstractRequest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vendor/spryker/spryker/Bundles/ZedRequest/src/SprykerFeature/Shared/ZedRequest/Client/AbstractRequest.php	(revision af325d422361de69aad5ce9f5452404658a56b29)
+++ vendor/spryker/spryker/Bundles/ZedRequest/src/SprykerFeature/Shared/ZedRequest/Client/AbstractRequest.php	(revision )
@@ -159,7 +159,7 @@
             );
 
             if (!empty($this->values['transfer'])) {
-                $transfer->fromArray($this->values['transfer']);
+                $transfer->fromArray($this->values['transfer'], true);
             }
 
             return $transfer;
Index: vendor/spryker/spryker/Bundles/Transfer/src/SprykerEngine/Zed/Transfer/Business/Model/Generator/TransferInterface/TransferInterfaceDefinitionBuilder.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vendor/spryker/spryker/Bundles/Transfer/src/SprykerEngine/Zed/Transfer/Business/Model/Generator/TransferInterface/TransferInterfaceDefinitionBuilder.php	(revision af325d422361de69aad5ce9f5452404658a56b29)
+++ vendor/spryker/spryker/Bundles/Transfer/src/SprykerEngine/Zed/Transfer/Business/Model/Generator/TransferInterface/TransferInterfaceDefinitionBuilder.php	(revision )
@@ -50,6 +50,7 @@
     public function getDefinitions()
     {
         $definitions = $this->loader->getDefinitions();
+        $definitions = $this->merger->merge($definitions);
 
         return $this->buildDefinitions($definitions, $this->interfaceDefinition);
     }
Index: vendor/spryker/spryker/Bundles/Price/src/SprykerFeature/Zed/Price/Persistence/PriceQueryContainer.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vendor/spryker/spryker/Bundles/Price/src/SprykerFeature/Zed/Price/Persistence/PriceQueryContainer.php	(revision af325d422361de69aad5ce9f5452404658a56b29)
+++ vendor/spryker/spryker/Bundles/Price/src/SprykerFeature/Zed/Price/Persistence/PriceQueryContainer.php	(revision )
@@ -85,7 +85,7 @@
      */
     public function addFilter($query, $idPriceProduct)
     {
-        return $query->filterByIdPriceProduct($idPriceProduct, Criteria::NOT_EQUAL);
+        return $query->filterByIdPriceProduct($idPriceProduct, Criteria::EQUAL);
     }
 
     /**
Index: vendor/spryker/spryker/Bundles/Transfer/src/SprykerEngine/Shared/Transfer/AbstractTransfer.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vendor/spryker/spryker/Bundles/Transfer/src/SprykerEngine/Shared/Transfer/AbstractTransfer.php	(revision af325d422361de69aad5ce9f5452404658a56b29)
+++ vendor/spryker/spryker/Bundles/Transfer/src/SprykerEngine/Shared/Transfer/AbstractTransfer.php	(revision )
@@ -6,12 +6,13 @@
 
 namespace SprykerEngine\Shared\Transfer;
 
+use Pyz\SprykerBugfixInterface;
 use Zend\Code\Generator\DocBlock\Tag\ReturnTag;
 use Zend\Code\Reflection\MethodReflection;
 use Zend\Filter\Word\CamelCaseToUnderscore;
 use Zend\Filter\Word\UnderscoreToCamelCase;
 
-abstract class AbstractTransfer extends \ArrayObject implements TransferInterface
+abstract class AbstractTransfer extends \ArrayObject implements TransferInterface, SprykerBugfixInterface
 {
 
     /**
@@ -128,7 +129,7 @@
             // Process Array
             if (is_array($value) && $this->isArray($getterReturn) && $type === 'ArrayObject') {
                 $elementType = $this->getArrayTypeWithNamespace($getterReturn);
-                $value = $this->processArrayObject($elementType, $value);
+                $value = $this->processArrayObject($elementType, $value, $ignoreMissingProperty);
             }
 
             // Process nested Transfer Objects
@@ -136,7 +137,7 @@
                 /** @var TransferInterface $transferObject */
                 $transferObject = new $type();
                 if (is_array($value)) {
-                    $transferObject->fromArray($value);
+                    $transferObject->fromArray($value, $ignoreMissingProperty);
                     $value = $transferObject;
                 }
             }
@@ -144,7 +145,7 @@
             try {
                 $this->$setter($value);
             } catch (\Exception $e) {
-                if ($ignoreMissingProperty) {
+                if (!$ignoreMissingProperty) {
                     throw new \InvalidArgumentException(
                         sprintf('Missing property "%s" in "%s" (setter %s)', $property, get_class($this), $setter)
                     );
@@ -159,9 +160,10 @@
      * @param string $elementType
      * @param array $arrayObject
      *
+     * @param bool $ignoreMissingProperties
      * @return \ArrayObject
      */
-    protected function processArrayObject($elementType, array $arrayObject)
+    protected function processArrayObject($elementType, array $arrayObject, $ignoreMissingProperties = false)
     {
         /* @var TransferInterface $transferObject */
         $transferObjectsArray = new \ArrayObject();
@@ -169,12 +171,12 @@
             if (is_array($arrayElement)) {
                 if ($this->isAssociativeArray($arrayElement)) {
                     $transferObject = new $elementType();
-                    $transferObject->fromArray($arrayElement);
+                    $transferObject->fromArray($arrayElement, $ignoreMissingProperties);
                     $transferObjectsArray->append($transferObject);
                 } else {
                     foreach ($arrayElement as $arrayElementItem) {
                         $transferObject = new $elementType();
-                        $transferObject->fromArray($arrayElementItem);
+                        $transferObject->fromArray($arrayElementItem, $ignoreMissingProperties);
                         $transferObjectsArray->append($transferObject);
                     }
                 }
